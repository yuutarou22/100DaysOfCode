class ExThread extends Thread {
    // 1. Threadクラスを継承する
    public void run() {
        // 2. スレッド実行時の処理をrunメソッドに書く
        for (int i = 0; i < 10; i++) {
            System.out.println(getName() + ":" + i);
            try {
                sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }

    /**
     * Threadクラスには、スレッドの優先度に関する定数、メソッドが定義されている。
     * 【定数】
     * 　・MAX_PRIORITY　スレッドに設定できる最高優先順位10を表す。
     * 　・MIN_PRIORITY　スレッドに設定できる最低優先順位 1を表す。
     * 　・NORM_PRIORITY　スレッドに設定できるデフォルト優先順位 5を表す。
     * 【メソッド】
     * 　・getPriority　スレッドの優先順位を返す。
     * 　・setPriority　スレッドの優先順位を変更する。
     */


    /**
     * 【ライフサイクルについて】
     * 参考：http://www.javaroad.jp/java_thread2.htm#mm-24
     * 主なライフサイクルの流れは以下の通り
     * 　1. .new　　　　　　　スレッドオブジェクトが生成される。（まだシステム資源は割り当てられない）
     * 　2. .start()　　　　　スレッドが実行可能状態になる
     * 　3. .スケジュール　　　優先度によって実行(.run())したり、退去(yield())する
     * 　4-1. sleep　　　　　指定した時間の間、実行不可状態になる。
     * 　4-2. wait　　　　　　他のメソッドからnotify,notifyAllメソッドが呼び出されるまで実行不可状態。
     * 　4-3. 入出力ブロック　データ読み込みなどで入出力に時間がかかるとそのスレッドは実行不可状態になる。
     * 　　　　　　　　　　　　入出力処理が終了した時点で再び実行可能状態になる。
     * 　4-4. ロック　　　　　スレッドがsynchronized（同期処理）指定された処理を実行する時、
     * 　　　　　　　　　　　　他のスレッドが既にsynchronized指定された処理を実行していた場合、
     * 　　　　　　　　　　　　後から実行しようとしたスレッドは実行不可状態になる。
     * 　5. 終了　　　　　　　.run()メソッドに記載された処理が終了した時点でスレッドも終了する。
     * 　　　　　　　　　　　　※一度newして終了したスレッドは、再びstartメソッドを実行しても動かない。
     */
}